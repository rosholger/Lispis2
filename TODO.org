+ [X] Arguments from C++. Lua style, ie stack based.

  (+ 1 2 3) becomes
  #+BEGIN_SRC C++
  pushValue(vm, value(1));
  pushValue(vm, value(2));
  pushValue(vm, value(3));
  getGlobal(vm, symbol(vm, "+"));
  call(vm, 3);
  #+END_SRC

+ [X] Convert parse tree into lists

+ [X] Pretty printing for lists

+ [X] Globals

+ [X] Move lambda from lexer to ast transformation

+ [X] Printing objects

+ [X] GC
  
  Works like a charm!

+ [X] Make the compiler compile function by function

  That is, dont parse the file then compile but parse a function,
  then compile it.
  This helps macros a LOT!
  Would also make mismatched parens crash, which is good
  bc right now we just get weird behavior.
  Need a generic parseExpr() that dispatch to different parse*()
  instead of just parseList(). parseExpr should fail on EOF

+ [X] better symbol interning
  
+ [X] REMOVE NEW

+ [X] Reuse temporary registers

+ [X] if
  
+ [X] scope (progn in CL)

+ [X] let

+ [X] set!
  
+ [X] Calling C++

+ [X] Globals
  + [X] Getting globals
  + [X] Setting globals
    #+BEGIN_SRC C++
    pushInt(vm, 23);
    setGlobal(vm, intern(vm, "foo"));
    #+END_SRC

+ [X] Lists, cons et. al.

+ [X] Macros
  
+ [X] quasiquote
  
  but kind of broken (quasiquote is hard!)

  
+ [X] make compileString not puke a bunch of debug logging when testing
  
+ [ ] intern keywords and make the ast builder use the inturned versions
  
+ [ ] Change strings from char * to struct String

+ [X] Objects

  + [X] Replace with one built on top of DynamicVector

    std::map sucks

  + [X] Parent
    
  + [X] Remove slot

  + [ ] Array part?

    Maybe we should make vectors first class?

+ [ ] Replace DynamicVector

  std::vector sucks

+ [ ] multi-line printing of lists

+ [ ] string interning?

+ [X] quote.

  + [X] primitives


  + [X] lists

    prob. just a call to a C function.

  + [\] objects
    We just quote everything, no fancy shit

+ [X] quote et. al. abreviations

+ [X] make-object sugar

+ [X] get-object-slot

+ [X] get-object-slot sugar

+ [-] Closures
  
  Lua style upvalues will be used.
  + [X] WORKS!!!!
  + [ ] Make a CLOSE op, like lua
    
    Boring, but needed.

+ [X] for, maybe as iterators?

+ [ ] Abstract char * into a stream for the parser.

  Might be a good place for "OOP"

+ [ ] Tune GC
  
+ [ ] Make GC grow the heap if we run out of memory
  
  mremap
  
+ [ ] Maybe switch to scheme define sugar?

+ [ ] Make it so that forward declarations of local
  functions are not needed
  
  Hard... would have to scan the function for let statements
  and add them as local variables before compiling the body.
  Would mean that

  #+BEGIN_SRC lisp
  (let a 1)
  (lambda ()
    (let b a)
    (let a 2))
  #+END_SRC
  
  Would be illegal, bc a would be a local variable without a value...
  I totally see why they chose the path they did with let now...
  
+ [ ] (if false 'blah) return garbage (should prob. be undef)

+ [ ] switch?
  
  Not like CL case, more like switch in C++
  (might be faster than an if else chain)
  
+ [ ] possibly skip the parse stage and go straight to AST?

  We are generating insane amounts of garbage when parsing, this would
  lower it substantially.
  
  We would still need to be able to convert from sexp to AST
  bc of macros though. So the *ToAST functions are not a waste of time.
  
  
+ [ ] need a way to tell how many frames from the last C-call we are

  That is if we have the call-stack

  lispisFuncA

  lispisFuncB
  
  cFunc

  lispisFuncC

  (stack-depth) should return 2, not 3
  
+ [ ] Add to FunctionProto (or Function) if its a macro or not.
  And add that info to stack-info.

+ [ ] Make errors from inside macros say where the macro is being
  expanded (file and line)
  
+ [ ] Somehow make null have a lineinfo when parsing.
  We get garbage asserts on code like ().
  
+ [X] Make typedef CFunction return LispisReturnStatus instead of just
  asserting
  
+ [X] Calling do-file from lispis
  
+ [X] Make do-file a macro? Would make macros defined in the loaded file
  work.
  
  do-file is now a macro, but making it a macro means it cant use things
  defined in the file it is used from. And its not a call so it should
  prob. not be called "do"-file, more like include-file.
  
  The only true solution to the problem is to make the language execute
  each top level expression before compiling the next top level
  expression. After compiling each top-level expression we temporarily
  insert a a return and run the newly compiled code. The problem with this
  is that the act of compiling a file/string would also run the top-level.
  This might be good though.
  
  The problem with this is go, the solution would be to, like CL,
  only allow (go label) inside tagbody. Since then we can always do
  patchGoStatements after each top-level expression and they should all
  succede.

+ [X] Make call work with C++ functions
  
+ [ ] Packages?

  Maybe make files into "packages". A package would be an object and a
  top-level function. Functions would need a reference to the package
  they are located in. And the parent of the package object would be 
  the globals? define would bind at package level. Prob. needs a
  defglobal too.
  
+ [ ] Create a format for compiled files

  Maybe serialize the AST? Or just dump the arena into a file?
  
+ [ ] Create go-scope and make it so that go and label can only appear
  inside a go-scope
  
+ [ ] We get garbage lineinfo in files "opened" from lispis using do-file
  
+ [-] Macros and lineInfo
  
  Works most of the time now